<?php
/**
 * WooCommerce to Evosus API Integration
 * 
 * This class handles syncing WooCommerce orders to Evosus, including:
 * - Customer duplicate checking
 * - Order creation
 * - Sync tracking
 */

class WooCommerce_Evosus_Integration {
    
    private $company_sn;
    private $ticket;
    private $base_url = 'https://cloud3.evosus.com/api';
    
    public function __construct($company_sn, $ticket) {
        $this->company_sn = $company_sn;
        $this->ticket = $ticket;
    }
    
    /**
     * Main function to sync a WooCommerce order to Evosus
     */
    public function sync_order_to_evosus($wc_order_id, $skip_validation = false) {
        $order = wc_get_order($wc_order_id);
        
        if (!$order) {
            return ['success' => false, 'message' => 'Order not found'];
        }
        
        // Step 1: Validate SKUs and check for issues
        if (!$skip_validation) {
            $validation = $this->validate_order($order);
            
            if (!$validation['valid']) {
                // Mark order for review
                $this->mark_order_for_review($wc_order_id, $validation['issues']);
                return [
                    'success' => false,
                    'needs_review' => true,
                    'issues' => $validation['issues'],
                    'message' => 'Order needs review before syncing'
                ];
            }
        }
        
        // Step 2: Check if customer exists in Evosus
        $customer_data = $this->prepare_customer_data($order);
        $evosus_customer = $this->find_or_create_customer($customer_data);
        
        if (!$evosus_customer['success']) {
            return $evosus_customer;
        }
        
        // Step 3: Get required reference data
        $distribution_method_id = $this->get_distribution_method_id();
        
        // Step 4: Create the order in Evosus
        $order_result = $this->create_evosus_order(
            $order, 
            $evosus_customer['customer_id'],
            $evosus_customer['bill_to_location_id'],
            $evosus_customer['ship_to_location_id'],
            $distribution_method_id
        );
        
        if ($order_result['success']) {
            // Step 5: Save sync metadata to WooCommerce order
            $this->save_sync_metadata($wc_order_id, $order_result['evosus_order_id']);
            // Clear review flag if it was set
            delete_post_meta($wc_order_id, '_evosus_needs_review');
            delete_post_meta($wc_order_id, '_evosus_review_issues');
        }
        
        return $order_result;
    }
    
    /**
     * Validate order before syncing - check SKUs and data
     */
    public function validate_order($order) {
        $issues = [];
        $has_errors = false;
        
        foreach ($order->get_items() as $item_id => $item) {
            $product = $item->get_product();
            $sku = $product->get_sku();
            $product_name = $item->get_name();
            
            // Check if SKU exists
            if (empty($sku)) {
                $issues[] = [
                    'type' => 'missing_sku',
                    'severity' => 'error',
                    'item_id' => $item_id,
                    'product_name' => $product_name,
                    'message' => "Product '{$product_name}' has no SKU assigned"
                ];
                $has_errors = true;
                continue;
            }
            
            // Check if SKU exists in Evosus
            $evosus_item = $this->check_sku_in_evosus($sku);
            
            if (!$evosus_item['exists']) {
                $issues[] = [
                    'type' => 'sku_not_found',
                    'severity' => 'error',
                    'item_id' => $item_id,
                    'product_name' => $product_name,
                    'sku' => $sku,
                    'message' => "SKU '{$sku}' not found in Evosus inventory",
                    'suggestions' => $evosus_item['suggestions']
                ];
                $has_errors = true;
            } elseif ($evosus_item['discontinued']) {
                $issues[] = [
                    'type' => 'discontinued',
                    'severity' => 'warning',
                    'item_id' => $item_id,
                    'product_name' => $product_name,
                    'sku' => $sku,
                    'message' => "SKU '{$sku}' is marked as discontinued in Evosus"
                ];
            }
            
            // Check if quantity available
            if ($evosus_item['exists']) {
                $qty_needed = $item->get_quantity();
                $qty_available = $evosus_item['quantity_available'];
                
                if ($qty_available < $qty_needed) {
                    $issues[] = [
                        'type' => 'insufficient_stock',
                        'severity' => 'warning',
                        'item_id' => $item_id,
                        'product_name' => $product_name,
                        'sku' => $sku,
                        'qty_needed' => $qty_needed,
                        'qty_available' => $qty_available,
                        'message' => "Insufficient stock: Need {$qty_needed}, Available {$qty_available}"
                    ];
                }
            }
        }
        
        return [
            'valid' => !$has_errors,
            'issues' => $issues
        ];
    }
    
    /**
     * Check if SKU exists in Evosus and find similar ones
     */
    private function check_sku_in_evosus($sku) {
        $response = $this->api_request('POST', '/method/Inventory_Item_Get', [
            'args' => [
                'ItemCode' => $sku
            ]
        ]);
        
        if ($response && isset($response['response']) && !empty($response['response'])) {
            $item = $response['response'][0];
            return [
                'exists' => true,
                'discontinued' => $item['Discontinued'] === 'Yes',
                'quantity_available' => $item['QuantityAvailable'],
                'item_data' => $item
            ];
        }
        
        // SKU not found - try to find similar SKUs
        $suggestions = $this->find_similar_skus($sku);
        
        return [
            'exists' => false,
            'suggestions' => $suggestions
        ];
    }
    
    /**
     * Find similar SKUs in Evosus (fuzzy matching)
     */
    private function find_similar_skus($sku) {
        // Try variations: uppercase, lowercase, with/without dashes, etc.
        $variations = [
            strtoupper($sku),
            strtolower($sku),
            str_replace('-', '', $sku),
            str_replace('_', '', $sku),
            str_replace(' ', '', $sku)
        ];
        
        $suggestions = [];
        
        foreach ($variations as $variant) {
            if ($variant === $sku) continue;
            
            $response = $this->api_request('POST', '/method/Inventory_Item_Get', [
                'args' => [
                    'ItemCode' => $variant
                ]
            ]);
            
            if ($response && isset($response['response']) && !empty($response['response'])) {
                $suggestions[] = [
                    'sku' => $variant,
                    'description' => $response['response'][0]['Description']
                ];
            }
        }
        
        return $suggestions;
    }
    
    /**
     * Mark order for manual review
     */
    public function mark_order_for_review($wc_order_id, $issues) {
        update_post_meta($wc_order_id, '_evosus_needs_review', 'yes');
        update_post_meta($wc_order_id, '_evosus_review_issues', $issues);
        update_post_meta($wc_order_id, '_evosus_review_date', current_time('mysql'));
        
        // Add order note
        $order = wc_get_order($wc_order_id);
        $order->add_order_note('⚠️ Evosus Sync: Order flagged for review due to validation issues.');
    }
    
    /**
     * Check if customer exists, if not create them
     */
    private function find_or_create_customer($customer_data) {
        // Search for existing customer by email
        $search_result = $this->search_customer_by_email($customer_data['EmailAddress1']);
        
        if ($search_result['found']) {
            // Customer exists - get their location IDs
            $addresses = $this->get_customer_addresses($search_result['customer_id']);
            
            return [
                'success' => true,
                'customer_id' => $search_result['customer_id'],
                'bill_to_location_id' => $addresses['bill_to_location_id'],
                'ship_to_location_id' => $addresses['ship_to_location_id'],
                'is_new' => false
            ];
        }
        
        // Customer doesn't exist - create new one
        return $this->create_customer($customer_data);
    }
    
    /**
     * Search for customer by email address
     */
    public function search_customer_by_email($email) {
        $response = $this->api_request('POST', '/method/Customer_Search', [
            'args' => [
                'EmailAddress_List' => $email
            ]
        ]);
        
        if ($response && isset($response['response']) && count($response['response']) > 0) {
            return [
                'found' => true,
                'customer_id' => $response['response'][0]['CustomerID']
            ];
        }
        
        return ['found' => false];
    }
    
    /**
     * Search for customer by phone number (alternative method)
     */
    private function search_customer_by_phone($phone) {
        // Remove all non-numeric characters
        $clean_phone = preg_replace('/[^0-9]/', '', $phone);
        
        $response = $this->api_request('POST', '/method/Customer_Search', [
            'args' => [
                'PhoneNumber_List' => $clean_phone
            ]
        ]);
        
        if ($response && isset($response['response']) && count($response['response']) > 0) {
            return [
                'found' => true,
                'customer_id' => $response['response'][0]['CustomerID']
            ];
        }
        
        return ['found' => false];
    }
    
    /**
     * Get customer addresses (needed for order creation)
     */
    private function get_customer_addresses($customer_id) {
        $response = $this->api_request('POST', '/method/Customer_Addresses_Get', [
            'args' => [
                'Customer_ID' => $customer_id
            ]
        ]);
        
        $bill_to_location_id = null;
        $ship_to_location_id = null;
        
        if ($response && isset($response['response'])) {
            foreach ($response['response'] as $address) {
                if ($address['IsDefaultBillTo'] === '1' || $address['IsDefaultBillTo'] === true) {
                    $bill_to_location_id = $address['CustomerLocationID'];
                }
                if ($address['IsDefaultShipTo'] === '1' || $address['IsDefaultShipTo'] === true) {
                    $ship_to_location_id = $address['CustomerLocationID'];
                }
            }
        }
        
        return [
            'bill_to_location_id' => $bill_to_location_id,
            'ship_to_location_id' => $ship_to_location_id
        ];
    }
    
    /**
     * Create new customer in Evosus
     */
    private function create_customer($customer_data) {
        $response = $this->api_request('POST', '/method/Customer_Add', [
            'args' => $customer_data
        ]);
        
        if ($response && isset($response['response'])) {
            $customer_id = $response['response'];
            
            // Get the newly created customer's addresses
            $addresses = $this->get_customer_addresses($customer_id);
            
            return [
                'success' => true,
                'customer_id' => $customer_id,
                'bill_to_location_id' => $addresses['bill_to_location_id'],
                'ship_to_location_id' => $addresses['ship_to_location_id'],
                'is_new' => true
            ];
        }
        
        return [
            'success' => false,
            'message' => 'Failed to create customer'
        ];
    }
    
    /**
     * Prepare customer data from WooCommerce order
     */
    private function prepare_customer_data($order) {
        $billing = $order->get_address('billing');
        $shipping = $order->get_address('shipping');
        
        // Use shipping address if available, otherwise use billing
        $has_shipping = !empty($shipping['address_1']);
        
        return [
            'Name_First' => $billing['first_name'],
            'Name_Last' => $billing['last_name'],
            'Name_Company' => $billing['company'],
            'BillTo_ContactName' => $billing['first_name'] . ' ' . $billing['last_name'],
            'BillTo_Address1' => $billing['address_1'],
            'BillTo_Address2' => $billing['address_2'],
            'BillTo_City' => $billing['city'],
            'BillTo_StateAbbr' => $billing['state'],
            'BillTo_PostCode' => $billing['postcode'],
            'BillTo_Country' => $this->get_country_name($billing['country']),
            'ShipTo_ContactName' => $has_shipping ? ($shipping['first_name'] . ' ' . $shipping['last_name']) : ($billing['first_name'] . ' ' . $billing['last_name']),
            'ShipTo_Address1' => $has_shipping ? $shipping['address_1'] : $billing['address_1'],
            'ShipTo_Address2' => $has_shipping ? $shipping['address_2'] : $billing['address_2'],
            'ShipTo_City' => $has_shipping ? $shipping['city'] : $billing['city'],
            'ShipTo_StateAbbr' => $has_shipping ? $shipping['state'] : $billing['state'],
            'ShipTo_PostCode' => $has_shipping ? $shipping['postcode'] : $billing['postcode'],
            'ShipTo_Country' => $has_shipping ? $this->get_country_name($shipping['country']) : $this->get_country_name($billing['country']),
            'PhoneNumber_Mobile1' => $billing['phone'],
            'EmailAddress1' => $billing['email'],
            'DataConversion_LegacySystemID' => 'WC_' . $order->get_customer_id(),
            'CustomerNoteText' => 'Customer created from WooCommerce Order #' . $order->get_order_number()
        ];
    }
    
    /**
     * Create order in Evosus
     */
    private function create_evosus_order($order, $customer_id, $bill_to_location_id, $ship_to_location_id, $distribution_method_id) {
        $line_items = $this->prepare_line_items($order);
        
        // Use WooCommerce order number in the PO Number field
        $wc_order_number = $order->get_order_number();
        
        $order_data = [
            'args' => [
                'Customer_ID' => (string)$customer_id,
                'BillTo_CustomerLocationID' => (string)$bill_to_location_id,
                'ShipTo_CustomerLocationID' => (string)$ship_to_location_id,
                'DistributionMethodID' => (string)$distribution_method_id,
                'ExpectedOrderTotal' => (string)$order->get_total(),
                'PONumber' => $wc_order_number,
                'Order_Note' => 'Order from WooCommerce #' . $wc_order_number,
                'Internal_Note' => 'WooCommerce Order ID: ' . $order->get_id() . ' | Created via API on ' . date('Y-m-d H:i:s'),
                'LineItems' => $line_items
            ]
        ];
        
        $response = $this->api_request('POST', '/method/Customer_Order_Add', $order_data);
        
        if ($response && isset($response['response'])) {
            $evosus_order_id = $response['response'];
            
            return [
                'success' => true,
                'evosus_order_id' => $evosus_order_id,
                'wc_order_number' => $wc_order_number,
                'message' => 'Order created successfully in Evosus'
            ];
        }
        
        return [
            'success' => false,
            'message' => 'Failed to create order in Evosus',
            'api_response' => $response
        ];
    }
    
    /**
     * Prepare line items from WooCommerce order
     */
    private function prepare_line_items($order) {
        $line_items = [];
        
        foreach ($order->get_items() as $item_id => $item) {
            $product = $item->get_product();
            
            // Check for SKU override first
            $sku_override = wc_get_order_item_meta($item_id, '_evosus_sku_override', true);
            
            if (!empty($sku_override)) {
                $item_code = $sku_override;
            } else {
                // Use SKU if available, otherwise use product ID
                $item_code = $product->get_sku() ? $product->get_sku() : 'WC_' . $product->get_id();
            }
            
            $line_items[] = [
                'ItemCode' => $item_code,
                'Quantity' => $item->get_quantity(),
                'Comment' => $item->get_name()
            ];
        }
        
        return $line_items;
    }
    
    /**
     * Get distribution method ID
     */
    private function get_distribution_method_id() {
        return get_option('evosus_distribution_method_id', '1');
    }
    
    /**
     * Save sync metadata to WooCommerce order
     */
    private function save_sync_metadata($wc_order_id, $evosus_order_id) {
        update_post_meta($wc_order_id, '_evosus_order_id', $evosus_order_id);
        update_post_meta($wc_order_id, '_evosus_sync_date', current_time('mysql'));
        update_post_meta($wc_order_id, '_evosus_synced', 'yes');
        
        // Add order note with cross-reference information
        $order = wc_get_order($wc_order_id);
        $wc_order_number = $order->get_order_number();
        
        $order->add_order_note(
            sprintf(
                '✅ Synced to Evosus' . "\n" .
                'Evosus Order ID: %s' . "\n" .
                'WC Order #%s added to Evosus PO Number field',
                $evosus_order_id,
                $wc_order_number
            )
        );
    }
    
    /**
     * Get Evosus order details by Order ID
     */
    public function get_evosus_order_details($evosus_order_id) {
        // Use Orders_Open_Search to find the order
        $response = $this->api_request('POST', '/method/Orders_Open_Search', [
            'args' => []
        ]);
        
        if ($response && isset($response['response'])) {
            foreach ($response['response'] as $order) {
                if ($order['OrderId'] == $evosus_order_id) {
                    return [
                        'success' => true,
                        'order' => $order
                    ];
                }
            }
        }
        
        // If not found in open orders, check closed orders
        $end_date = date('Y-m-d H:i:s');
        $begin_date = date('Y-m-d H:i:s', strtotime('-180 days'));
        
        $response = $this->api_request('POST', '/method/Orders_Closed_Search', [
            'args' => [
                'Begin_Date' => $begin_date,
                'End_Date' => $end_date
            ]
        ]);
        
        if ($response && isset($response['response'])) {
            foreach ($response['response'] as $order) {
                if ($order['OrderId'] == $evosus_order_id) {
                    return [
                        'success' => true,
                        'order' => $order
                    ];
                }
            }
        }
        
        return [
            'success' => false,
            'message' => 'Order not found in Evosus'
        ];
    }
    
    /**
     * Verify WooCommerce order number exists in Evosus PO field
     */
    public function verify_cross_reference($wc_order_id) {
        $order = wc_get_order($wc_order_id);
        $wc_order_number = $order->get_order_number();
        $evosus_order_id = get_post_meta($wc_order_id, '_evosus_order_id', true);
        
        if (empty($evosus_order_id)) {
            return [
                'success' => false,
                'message' => 'Order not synced to Evosus yet'
            ];
        }
        
        $evosus_order = $this->get_evosus_order_details($evosus_order_id);
        
        if (!$evosus_order['success']) {
            return $evosus_order;
        }
        
        $po_number = $evosus_order['order']['PoNo'];
        
        return [
            'success' => true,
            'verified' => ($po_number == $wc_order_number),
            'evosus_po_number' => $po_number,
            'wc_order_number' => $wc_order_number,
            'evosus_order_id' => $evosus_order_id,
            'message' => ($po_number == $wc_order_number) 
                ? 'Cross-reference verified successfully' 
                : 'PO Number mismatch detected'
        ];
    }
    
    /**
     * Get orders synced today
     */
    public function get_orders_synced_today() {
        return $this->get_orders_synced_in_range('today');
    }
    
    /**
     * Get orders synced this week
     */
    public function get_orders_synced_this_week() {
        return $this->get_orders_synced_in_range('this_week');
    }
    
    /**
     * Get orders synced in a date range
     */
    public function get_orders_synced_in_range($range = 'today') {
        $args = [
            'limit' => -1,
            'meta_query' => [
                [
                    'key' => '_evosus_synced',
                    'value' => 'yes'
                ]
            ]
        ];
        
        // Add date range
        switch ($range) {
            case 'today':
                $args['date_created'] = '>' . strtotime('today midnight');
                break;
            case 'this_week':
                $args['date_created'] = '>' . strtotime('monday this week');
                break;
            case 'this_month':
                $args['date_created'] = '>' . strtotime('first day of this month');
                break;
        }
        
        $orders = wc_get_orders($args);
        
        $results = [];
        foreach ($orders as $order) {
            $results[] = [
                'wc_order_id' => $order->get_id(),
                'wc_order_number' => $order->get_order_number(),
                'evosus_order_id' => get_post_meta($order->get_id(), '_evosus_order_id', true),
                'sync_date' => get_post_meta($order->get_id(), '_evosus_sync_date', true),
                'customer_name' => $order->get_billing_first_name() . ' ' . $order->get_billing_last_name(),
                'order_total' => $order->get_total(),
                'order_date' => $order->get_date_created()->format('Y-m-d H:i:s')
            ];
        }
        
        return $results;
    }
    
    /**
     * Get orders that need review
     */
    public function get_orders_needing_review() {
        $args = [
            'limit' => -1,
            'meta_query' => [
                [
                    'key' => '_evosus_needs_review',
                    'value' => 'yes'
                ]
            ]
        ];
        
        $orders = wc_get_orders($args);
        
        $results = [];
        foreach ($orders as $order) {
            $issues = get_post_meta($order->get_id(), '_evosus_review_issues', true);
            
            $results[] = [
                'wc_order_id' => $order->get_id(),
                'wc_order_number' => $order->get_order_number(),
                'customer_name' => $order->get_billing_first_name() . ' ' . $order->get_billing_last_name(),
                'order_total' => $order->get_total(),
                'order_date' => $order->get_date_created()->format('Y-m-d H:i:s'),
                'review_date' => get_post_meta($order->get_id(), '_evosus_review_date', true),
                'issues' => $issues
            ];
        }
        
        return $results;
    }
    
    /**
     * Update SKU mapping for an order item
     */
    public function update_order_item_sku($order_id, $item_id, $new_sku) {
        $order = wc_get_order($order_id);
        
        if (!$order) {
            return ['success' => false, 'message' => 'Order not found'];
        }
        
        // Store SKU override
        wc_update_order_item_meta($item_id, '_evosus_sku_override', $new_sku);
        
        return ['success' => true, 'message' => 'SKU mapping updated'];
    }
    
    /**
     * Approve order for sync after review
     */
    public function approve_order_for_sync($order_id) {
        // Re-validate to make sure issues are resolved
        $order = wc_get_order($order_id);
        $validation = $this->validate_order($order);
        
        if (!$validation['valid']) {
            return [
                'success' => false,
                'message' => 'Order still has validation errors',
                'issues' => $validation['issues']
            ];
        }
        
        // Clear review flag and sync
        delete_post_meta($order_id, '_evosus_needs_review');
        delete_post_meta($order_id, '_evosus_review_issues');
        
        return $this->sync_order_to_evosus($order_id, true);
    }
    
    /**
     * Check if order has already been synced
     */
    public function is_order_synced($wc_order_id) {
        return get_post_meta($wc_order_id, '_evosus_synced', true) === 'yes';
    }
    
    /**
     * Make API request to Evosus
     */
    private function api_request($method, $endpoint, $body = null) {
        $url = $this->base_url . $endpoint;
        $url .= '?CompanySN=' . urlencode($this->company_sn);
        $url .= '&ticket=' . urlencode($this->ticket);
        
        $args = [
            'method' => $method,
            'headers' => [
                'Content-Type' => 'application/json'
            ],
            'timeout' => 30
        ];
        
        if ($body) {
            $args['body'] = json_encode($body);
        }
        
        $response = wp_remote_request($url, $args);
        
        if (is_wp_error($response)) {
            error_log('Evosus API Error: ' . $response->get_error_message());
            return false;
        }
        
        $body = wp_remote_retrieve_body($response);
        return json_decode($body, true);
    }
    
    /**
     * Convert country code to full country name
     */
    private function get_country_name($country_code) {
        $countries = [
            'US' => 'United States',
            'CA' => 'Canada',
            'AU' => 'Australia',
            'GB' => 'United Kingdom',
            'JP' => 'Japan',
            'DE' => 'Germany',
            'FR' => 'France',
            'IT' => 'Italy',
            'ES' => 'Spain',
            'MX' => 'Mexico',
        ];
        
        return isset($countries[$country_code]) ? $countries[$country_code] : $country_code;
    }
}